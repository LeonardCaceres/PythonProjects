# All data was publicly available

# in alphabetical order
from aiogram import types, Dispatcher, Bot, executor
from aiogram.types.web_app_info import WebAppInfo
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from bs4 import BeautifulSoup
import json
import requests
import randfacts
import sqlite3
import time
import webbrowser

# from translate import Translator                               # bad translation
# tranclator = Translator(from_lang="English",to_lang="russian") # bad translation

API = "" #################################!!!!!!!!!! here should be your key to the telegram bot !!!!!!!!!!#################################

bot = Bot(API)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
PRODUCTS = {}

#############################################################################################################################################

#States section

def Order(input_dictionary, id):
    connection = sqlite3.connect('telegram_database.sql')
    cursor = connection.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS orders(id int auto_increment prime key, name varchar(50), telephone varchar(50), email varchar(50), message varchar(4096))')
    connection.commit()
    cursor.execute("INSERT INTO orders (id, name, telephone, email, message) VALUES ('%s', '%s', '%s', '%s', '%s')" % (id, input_dictionary['name'], input_dictionary['telephone'], input_dictionary['email'], input_dictionary['message']))
    connection.commit()
    cursor.close()
    connection.close()

def Feedback(input_dictionary, id):
    connection = sqlite3.connect('telegram_database.sql')
    cursor = connection.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS feedbacks(id int auto_increment prime key, name varchar(50), message varchar(4096))')
    connection.commit()
    cursor.execute("INSERT INTO feedbacks (id, name, message) VALUES ('%s', '%s', '%s')" % (id, input_dictionary['name'], input_dictionary['feedback']))
    connection.commit()
    cursor.close()
    connection.close()

class Form_order(StatesGroup):
    name = State()
    telephone = State()
    email = State()
    message = State()

@dp.message_handler(state=Form_order.name)
async def form_name(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 50:
        await state.update_data(name=message.text)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {message.text}!‚úÖ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await Form_order.telephone.set()
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_order.name.set()

@dp.message_handler(state=Form_order.telephone)
async def form_telephone(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 50:
        await state.update_data(telephone=message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!‚úÖ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
        await Form_order.email.set()
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_order.telephone.set()

@dp.message_handler(state=Form_order.email)
async def form_email(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 50:
        await state.update_data(email=message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!‚úÖ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:')
        await Form_order.message.set()
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_order.email.set()

@dp.message_handler(state=Form_order.message)
async def form_message(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 4090:
        markup = types.ReplyKeyboardMarkup(row_width = 1, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ö—É–¥–∞ –ø–æ–π–¥–µ–º?")
        btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
        btn_up = types.KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
        btn_more = types.KeyboardButton("–ó–∞–∫–∞–∑")
        markup.add(btn_more, btn_up, btn_menu)
        await state.update_data(message=message.text)
        data = await state.get_data()
        await message.answer(f"–ò–º—è: {data['name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {data['telephone']}, Email: {data['email']}, –ó–∞–∫–∞–∑:{data['message']}")
        await message.answer('–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!‚úÖ‚úÖ‚úÖ', reply_markup=markup)
        await state.finish()
        Order(data, message.from_user.id)
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_order.message.set()

class Form_feedback(StatesGroup):
    name = State()
    feedback = State()

@dp.message_handler(state=Form_feedback.name)
async def Form_Feedback_name(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 50:
        await state.update_data(name=message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!‚úÖ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:')
        await Form_feedback.feedback.set()
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_feedback.name.set()

@dp.message_handler(state=Form_feedback.feedback)
async def Form_Feedback_name(message: types.Message, state: FSMContext):
    time.sleep(0.2)
    if len(message.text) <= 4090:
        markup = types.ReplyKeyboardMarkup(row_width = 1, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ö—É–¥–∞ –ø–æ–π–¥–µ–º?")
        btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
        btn_up = types.KeyboardButton("–ó–∞–∫–∞–∑")
        btn_more = types.KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
        markup.add(btn_more, btn_up, btn_menu)
        await state.update_data(feedback=message.text)
        data = await state.get_data()
        await message.answer(f"–ò–º—è: {data['name']}, –û—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {data['feedback']}")
        await message.answer('–û—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!‚úÖ‚úÖ‚úÖ', reply_markup=markup)
        await state.finish()
        Feedback(data, message.from_user.id)
    else:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096!üöß\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑:')
        await Form_feedback.feedback.set()

#############################################################################################################################################
# commands section

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    btn_site = types.InlineKeyboardButton('üì≤–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç-–±–∞–∑—ãüíª', url = "http://gfcc.ru/")
    btn_help = types.InlineKeyboardButton('üîä–û –Ω–∞—Åüîä', callback_data='we')
    btn_what_can_do = types.InlineKeyboardButton('‚Åâ–ß—Ç–æ —è —É–º–µ—é?ü§î', callback_data='cycle')
    markup.row(btn_what_can_do,btn_help)
    markup.row(btn_site)
    file = open('photos/Start_flowers.jpg', 'rb')
    await message.answer_photo(file, f'<strong>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}!</strong>\n–≠—Ç–æ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –±–æ—Ç!!!\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏!', parse_mode='html', reply_markup=markup)

@dp.message_handler(commands=["about_me"])
async def me(message: types.Message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_menu = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é')
    markup.add(btn_menu)
    await message.answer(message, reply_markup=markup)

@dp.message_handler(commands=["site", "website"])
async def me(message: types.Message):
    await message.answer('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
    time.sleep(0.2)
    webbrowser.open(url='http://gfcc.ru/')

@dp.message_handler(commands=['git', 'github'])
async def open_git(message):
    await message.reply('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç...')
    time.sleep(0.5)
    webbrowser.open("https://github.com/LeonardCaceres")

@dp.message_handler(commands=['orders'])
async def orders_com(message: types.Message):
    try:
        connection = sqlite3.connect('telegram_database.sql')
        cursor = connection.cursor()
        cursor.execute('CREATE TABLE IF NOT EXISTS orders(id int auto_increment prime key, name varchar(50), telephone varchar(50), email varchar(50), message varchar(4096))')
        connection.commit()
        cursor.execute('SELECT * FROM orders')
        orders = cursor.fetchall()
        info = ''
        for el in orders:
            info += f'{el[0]}\n{el[1]}\n{el[2]}\n{el[3]}\n{el[4]}'
        cursor.close()
        connection.close()
        await message.answer(info, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(orders)
    except Exception:
        await message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞üìù')

@dp.message_handler(commands=['feedbacks'])
async def feedbacks(message: types.Message):
    try:
        connection = sqlite3.connect('telegram_database.sql')
        cursor = connection.cursor()
        cursor.execute('CREATE TABLE IF NOT EXISTS feedbacks(id int auto_increment prime key, name varchar(50), message varchar(4096))')
        connection.commit()
        cursor.execute('SELECT * FROM feedbacks')
        feedbacks = cursor.fetchall()
        info = ''
        for el in feedbacks:
            info += f'{el[0]}\n{el[1]}\n{el[2]}'
        cursor.close()
        connection.close()
        await message.answer(info, reply_markup=types.ReplyKeyboardRemove())
        await message.answer(feedbacks)
    except Exception:
        await message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞üìù')

#############################################################################################################################################
# callback section

@dp.callback_query_handler(text="we")
async def help(callback: types.CallbackQuery):
    edit_markup = types.InlineKeyboardMarkup()
    await callback.message.edit_reply_markup(reply_markup=edit_markup)
    markup = types.InlineKeyboardMarkup()
    btn_start_use = types.InlineKeyboardButton('üßë‚Äçüíª–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞üë©‚Äçüíª', callback_data='cycle')
    markup.add(btn_start_use)
    photo_about = open('photos/about_me.jpg', 'rb')
    await callback.message.answer_photo(photo_about, "üåä–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–≤ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö.\n/git - –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–∏—Ç—Ö–∞–±üöÄ", reply_markup=markup)

@dp.callback_query_handler(text="wiki")
async def wiki(callback: types.CallbackQuery):
    edit_markup = types.InlineKeyboardMarkup()
    await callback.message.edit_reply_markup(reply_markup=edit_markup)
    file = open('photos/wiki.jpg', 'rb')
    category = callback.message.text.split(':')[0].split()[0]
    if category == '–°–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ':
        category = callback.message.text.split(':')[0].split()[2]
    try:
        url = f'https://ru.wikipedia.org/wiki/{category}'
        req = requests.get(url=url)
        src = req.text
        soup = BeautifulSoup(src,"lxml")
        info = soup.find('p').text
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_web = types.InlineKeyboardButton("üñ•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–± —ç—Ç–æ–º –≤ '–æ–∫–æ—à–∫–µ' –í–∏–∫–∏–ø–µ–¥–∏–∏üó£",web_app=WebAppInfo(url=url), callback_data= 'web')
        btn_yandex = types.InlineKeyboardButton("üñ•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–± —ç—Ç–æ–º –≤ '–æ–∫–æ—à–∫–µ' –Ø–Ω–¥–µ–∫—Å–∞üó£", web_app=WebAppInfo(url=f"https://yandex.ru/search/?text={category}"), callback_data= 'web')
        btn_exit = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö", callback_data='cycle')
        markup.add(btn_web, btn_yandex, btn_exit)
        await callback.message.answer_photo(file, info, reply_markup= markup)
    except Exception:
        await callback.message.answer('—É–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü•∫')

@dp.callback_query_handler(text='cycle')
async def cycle(callback: types.CallbackQuery):
    edit_markup = types.InlineKeyboardMarkup()
    await callback.message.edit_reply_markup(reply_markup=edit_markup)
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?")
    btn_product = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö')
    btn_feedback = types.KeyboardButton('–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
    btn_dino = types.KeyboardButton('–í–∫–ª—é—á–∏ –∏–≥—Ä—É –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞', web_app=WebAppInfo(url='https://dino-chrome.com/ru'))
    btn_randfact = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç')
    markup.add(btn_product, btn_feedback, btn_dino, btn_randfact)
    file = open('photos/cycle.jpg', 'rb')
    await callback.message.answer_photo(file, '<b><strong>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:</strong></b>\n–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?:\n1)–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ <b>Golden Flowers</b>\n2)–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–∫–∞–∑(<b>Golden Flowers</b>)\n3)–í–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—É –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞\n4)–ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n5)/site - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', parse_mode='html', reply_markup=markup)

@dp.callback_query_handler(text="products")
async def products(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    markup_delete = types.ReplyKeyboardRemove()
    await callback.message.reply('‚è≥–°–µ–∫—É–Ω–¥—É...', reply_markup=markup_delete)
    time.sleep(1)
    await bot.delete_message(callback.message.chat.id, callback.message.message_id + 1)
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–≤–µ—Ç–æ–≤")
    btn1 = types.KeyboardButton('–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã')
    btn2 = types.KeyboardButton('–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è')
    btn3 = types.KeyboardButton('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã')
    btn_exit = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é')
    markup.add(btn1, btn2, btn3, btn_exit)
    await callback.message.answer('–°—É—â–µ—Å—Ç–≤—É–µ—Ç <b><em>3</em></b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <strong>—Ç–æ–≤–∞—Ä–æ–≤</strong>:\n<b><strong>‚Ä¢–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã\n‚Ä¢–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n‚Ä¢–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</strong></b>\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode='html', reply_markup=markup)

@dp.callback_query_handler(text = "fact")
async def fact(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup()
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_fact = types.InlineKeyboardButton('–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!', callback_data='fact')
    btn_up = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='cycle')
    btn_interpreter = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫', url = 'https://translate.yandex.ru/?from=tabbar&source_lang=en&target_lang=ru')
    markup.add(btn_fact, btn_interpreter, btn_up)
    await callback.message.answer(randfacts.get_fact(), reply_markup=markup)

@dp.callback_query_handler()
async def all_callback(callback: types.CallbackQuery):
    edit_markup = types.InlineKeyboardMarkup()
    await callback.message.edit_reply_markup(reply_markup=edit_markup)
    with open('info_dict.json', encoding="utf-8") as file:
        product_info = json.load(file)
    with open("data/cut_flowers.json", encoding="utf-8") as file:
        cut_flowers = json.load(file)
    with open('data/right_name_cut.txt', encoding="utf-8") as file:
        cut_names = file.read()
    with open("data/potted_flowers.json", encoding="utf-8") as file:
        potted_flowers = json.load(file)
    with open('data/right_name_potted.txt', encoding="utf-8") as file:
        potted_names = file.read()
    with open("data/access_flowers.json", encoding="utf-8") as file:
        access_flowers = json.load(file)
    with open('data/right_name_access.txt', encoding="utf-8") as file:
        access_names = file.read()
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_wiki = types.InlineKeyboardButton('üî≠–£–∑–Ω–∞—Ç—å –æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞üì°', callback_data='wiki')
    btn_exit = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö", callback_data='cycle')
    btn_products = types.InlineKeyboardButton('–ï—â–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö',callback_data='products')
    markup.add(btn_wiki, btn_products, btn_exit)
    markup_exit = types.InlineKeyboardMarkup()
    markup_exit.add(btn_exit)
    if callback.data in cut_names.split('\n'):
        if product_info[cut_flowers[callback.data]] != "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞":
            await callback.message.answer(f'–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ :\n—Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ:')
            text_mes = callback.data + ':\n' + '\n'.join(product_info[cut_flowers[callback.data]])
            if len(text_mes) > 4095:
                if len(text_mes) > 8160:
                    await callback.message.answer(text_mes[:4090])
                    await callback.message.answer(text_mes[4090:8160])
                    await callback.message.answer(callback.data + ':\n' + text_mes[8160:], reply_markup=markup)
                else:
                    await callback.message.answer(text_mes[:4095])
                    await callback.message.answer(callback.data + ':\n' + text_mes[4095:], reply_markup=markup)
            else:
                await callback.message.answer(text_mes, reply_markup=markup)
        else:
            photo_no = open('photos/not_on_sale.jpg', 'rb')
            await callback.message.answer_photo(photo_no, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏({callback.data}) –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã", reply_markup=markup_exit)
    if callback.data in potted_names.split('\n'):
        if product_info[potted_flowers[callback.data]] != "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞":
            await callback.message.answer(f'–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ :\n—Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ:')
            text_mes = callback.data + ':\n' + '\n'.join(product_info[potted_flowers[callback.data]])
            if len(text_mes) > 4096:
                if len(text_mes) > 4095 * 2:
                    await callback.message.answer(text_mes[:4095])
                    await callback.message.answer(text_mes[4095:4095 * 2])
                    await callback.message.answer(callback.data + ':\n' + text_mes[4095 * 2:], reply_markup=markup)
                else:
                    await callback.message.answer(text_mes[:4095])
                    await callback.message.answer(callback.data + ':\n' + text_mes[4095:],reply_markup=markup)
            else:
                await callback.message.answer(text_mes,reply_markup=markup)
        else:
            photo_no = open('photos/not_on_sale.jpg', 'rb')
            await callback.message.answer_photo(photo_no, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏({callback.data}) –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã", reply_markup=markup_exit)
    if callback.data in access_names.split('\n'):
        if product_info[access_flowers[callback.data]] != "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞":
            await callback.message.answer(f'–í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ :\n—Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ:')
            text_mes = callback.data + ':\n' + '\n'.join(product_info[access_flowers[callback.data]])
            if len(text_mes) > 4096:
                if len(text_mes) > 4095 * 2:
                    await callback.message.answer(text_mes[:4095])
                    await callback.message.answer(text_mes[4095:4095 * 2])
                    await callback.message.answer(callback.data + ':\n' + text_mes[4095 * 2:], reply_markup=markup)
                else:
                    await callback.message.answer(text_mes[:4095])
                    await callback.message.answer(callback.data + ':\n' + text_mes[4095:], reply_markup=markup)
            else:
                await callback.message.answer(text_mes, reply_markup=markup)
        else:
            photo_no = open('photos/not_on_sale.jpg', 'rb')
            await callback.message.answer_photo(photo_no, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏({callback.data}) –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã", reply_markup=markup_exit)

#############################################################################################################################################

# text section

@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def media(message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(btn_menu)
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤—Å–µ–≥–æ –ª–∏—à—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏ –º–æ–≥—É —Ç–æ–ª—å–∫–æ –ª—é–±–æ–≤–∞—Ç—å—Å—è –≤–∞—à–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø—Ä–∏ –≤–∞—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –º–Ω–µ(((', reply_markup=markup)

@dp.message_handler(content_types=types.ContentTypes.AUDIO)
async def audio(message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(btn_menu)
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤—Å–µ–≥–æ –ª–∏—à—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏ –º–æ–≥—É —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞—Ç—å –≤–∞—à–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –≤–∞—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –º–Ω–µ(((', reply_markup=markup)

@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def document(message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(btn_menu)
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –≤—Å–µ–≥–æ –ª–∏—à—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏ –º–æ–≥—É —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å –≤–∞—à–∏ —Ñ–∞–π–ª—ã –ø—Ä–∏ –≤–∞—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –º–Ω–µ(((', reply_markup=markup)

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    global PRODUCTS
    btn_products = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='products')
    btn_menu = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö", callback_data='cycle')
    if message.text.lower() == "—Ä–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç":
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_fact = types.InlineKeyboardButton('–ï—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!',callback_data= 'fact')
        btn_up = types.InlineKeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é', callback_data='cycle')
        btn_interpreter = types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫',
                                                     url='https://translate.yandex.ru/?from=tabbar&source_lang=en&target_lang=ru')
        markup.add(btn_fact, btn_interpreter, btn_up)
        await message.answer(randfacts.get_fact(), reply_markup=markup)
    elif message.text.lower() == '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö':
        markup_delete = types.ReplyKeyboardRemove()
        await message.reply('‚è≥–°–µ–∫—É–Ω–¥—É...',reply_markup=markup_delete)
        time.sleep(1)
        await bot.delete_message(message.chat.id, message.message_id + 1)
        markup = types.ReplyKeyboardMarkup(row_width=1,one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ü–≤–µ—Ç–æ–≤")
        btn1 = types.KeyboardButton('–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã')
        btn2 = types.KeyboardButton('–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è')
        btn3 = types.KeyboardButton('–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã')
        btn_exit = types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é')
        markup.add(btn1,btn2,btn3,btn_exit)
        await message.answer('–°—É—â–µ—Å—Ç–≤—É–µ—Ç <b><em>3</em></b> –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <strong>—Ç–æ–≤–∞—Ä–æ–≤</strong>:\n<b><strong>‚Ä¢–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã\n‚Ä¢–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è\n‚Ä¢–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</strong></b>\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', parse_mode='html',reply_markup=markup)
    elif message.text.lower() == '—Å—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã':
        markup_delete = types.ReplyKeyboardRemove()
        await message.reply('‚è≥–°–µ–∫—É–Ω–¥—É...', reply_markup=markup_delete)
        time.sleep(1)
        await bot.delete_message(message.chat.id, message.message_id + 1)
        with open('data/names.txt', encoding="utf-8") as file:
            names = file.readlines()
        strings = ''
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i, name in enumerate(names):
            if i == 10:
                break
            right_name = name[17:].replace('__', ' ').replace('_', ' ')
            btn_name = right_name.replace('\n','')
            markup.add(types.InlineKeyboardButton(f"{btn_name}",callback_data=str(btn_name)))
            strings += right_name
            PRODUCTS[btn_name] = name.replace('\n','')
        markup.add(btn_products, btn_menu)
        photo_cut = open('photos/cut.jpg', 'rb')
        await message.answer_photo(photo_cut, "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  '–°—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã' –µ—Å—Ç—å 10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=markup)
        # await message.answer(strings)
        # with open('data/right_name_cut.txt','w',encoding='utf-8') as file:
        #     file.write(strings)
        # with open('data/cut_flowers.json', 'w',encoding="utf-8") as file:
        #     json.dump(PRODUCTS, file, indent=4, ensure_ascii=False)
    elif message.text.lower() == '–≥–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è':
        markup_delete = types.ReplyKeyboardRemove()
        await message.reply('‚è≥–°–µ–∫—É–Ω–¥—É...', reply_markup=markup_delete)
        time.sleep(1)
        await bot.delete_message(message.chat.id, message.message_id + 1)
        with open('data/names.txt', encoding="utf-8") as file:
            names = file.readlines()
        strings = ''
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i, name in enumerate(names):
            if i < 10:
                continue
            if i == 24:
                break
            right_name = name[20:].replace('__', ' ').replace('_', ' ')
            btn_name = right_name.replace('\n', '')
            markup.add(types.InlineKeyboardButton(f"{btn_name}", callback_data=str(btn_name)))
            strings += right_name
            PRODUCTS[btn_name] = name.replace('\n', '')
        markup.add(btn_products, btn_menu)
        photo_potted = open('photos/potted.jpg', 'rb')
        await message.answer_photo(photo_potted, "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ì–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è' –µ—Å—Ç—å 14 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=markup)
        # await message.answer(strings)
        # with open('data/right_name_potted.txt','w',encoding='utf-8') as file:
        #     file.write(strings)
        # with open('data/potted_flowers.json', 'w',encoding="utf-8") as file:
        #     json.dump(PRODUCTS, file, indent=4, ensure_ascii=False)
    elif message.text.lower() == '–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã':
        markup_delete = types.ReplyKeyboardRemove()
        await message.reply('‚è≥–°–µ–∫—É–Ω–¥—É...', reply_markup=markup_delete)
        time.sleep(1)
        await bot.delete_message(message.chat.id, message.message_id + 1)
        with open('data/names.txt', encoding="utf-8") as file:
            names = file.readlines()
        strings = ''
        markup = types.InlineKeyboardMarkup(row_width=1)
        for i, name in enumerate(names):
            if i < 25:
                continue
            right_name = name[12:].replace('__', ' ').replace('_', ' ')
            btn_name = right_name.replace('\n', '')
            markup.add(types.InlineKeyboardButton(f"{btn_name}", callback_data=str(btn_name)))
            strings += right_name
            PRODUCTS[btn_name] = name.replace('\n', '')
        markup.add(btn_products, btn_menu)
        photo_access = open('photos/access.jpg', 'rb')
        await message.answer_photo(photo_access, "–í –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã' –µ—Å—Ç—å 10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=markup)
        # await message.answer(strings)
        # with open('data/right_name_access.txt','w',encoding='utf-8') as file:
        #     file.write(strings)
        # with open('data/access_flowers.json', 'w',encoding="utf-8") as file:
        #     json.dump(PRODUCTS, file, indent=4, ensure_ascii=False)
    elif message.text.lower() == '–æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é':
        markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?")
        btn_product = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö')
        btn_feedback = types.KeyboardButton('–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
        btn_dino = types.KeyboardButton('–í–∫–ª—é—á–∏ –∏–≥—Ä—É –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞', web_app=WebAppInfo(url='https://dino-chrome.com/ru'))
        btn_randfact = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç')
        markup.add(btn_product, btn_feedback, btn_dino, btn_randfact)
        file = open('photos/cycle.jpg', 'rb')
        await message.answer_photo(file, '<b><strong>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:</strong></b>\n–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?:\n1)–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞ <b>Golden Flowers</b>\n2)–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–∫–∞–∑(<b>Golden Flowers</b>)\n3)–í–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—É –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞\n4)–ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n5)/site - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', parse_mode='html', reply_markup=markup)
    elif message.text.lower() == '—Ö–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?(–æ—Ç–∑—ã–≤ –∏–ª–∏ –∑–∞–∫–∞–∑)")
        btn1 = types.KeyboardButton('–û—Ç–∑—ã–≤—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è')
        btn2 = types.KeyboardButton('–ó–∞–∫–∞–∑')
        markup.add(btn1, btn2)
        await message.answer('–ß—Ç–æ –≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)
    elif message.text.lower() == '–∑–∞–∫–∞–∑':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è(–¥–ª–∏–Ω–∞ < 50):', reply_markup= types.ReplyKeyboardRemove())
        await Form_order.name.set()
    elif message.text.lower() == '–æ—Ç–∑—ã–≤—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è(–¥–ª–∏–Ω–∞ < 50):', reply_markup= types.ReplyKeyboardRemove())
        await Form_feedback.name.set()
    else:
        markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
        btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
        markup.add(btn_menu)
        await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é((\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é!„ÄΩ', reply_markup=markup)

@dp.message_handler()
async def all_messages(message: types.Message):
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    btn_menu = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")
    markup.add(btn_menu)
    await message.answer('–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!!üêº, —Ç–æ–ª—å–∫–æ —è –Ω–µ –º–æ–≥—É —ç—Ç–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å(((ü•∫', reply_markup=markup)

#############################################################################################################################################

executor.start_polling(dp)